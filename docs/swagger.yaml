basePath: /
definitions:
  model.AlterCkTableReq:
    properties:
      add:
        items:
          $ref: '#/definitions/model.CkTableNameTypeAfter'
        type: array
      drop:
        items:
          type: string
        type: array
      modify:
        items:
          $ref: '#/definitions/model.CkTableNameType'
        type: array
      name:
        type: string
    type: object
  model.CkCluster:
    properties:
      name:
        type: string
      shards:
        items:
          $ref: '#/definitions/model.CkShard'
        type: array
    type: object
  model.CkDeployConfig:
    properties:
      clusters:
        items:
          $ref: '#/definitions/model.CkCluster'
        type: array
      password:
        type: string
      path:
        type: string
      user:
        type: string
      zkServers:
        items:
          $ref: '#/definitions/model.ZkNode'
        type: array
    type: object
  model.CkReplica:
    properties:
      host:
        type: string
      port:
        type: integer
    type: object
  model.CkShard:
    properties:
      replicas:
        items:
          $ref: '#/definitions/model.CkReplica'
        type: array
    type: object
  model.CkTableNameType:
    properties:
      name:
        type: string
      type:
        type: string
    type: object
  model.CkTableNameTypeAfter:
    properties:
      after:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  model.CkTablePartition:
    properties:
      name:
        type: string
      policy:
        type: integer
    type: object
  model.CreateCkTableReq:
    properties:
      fields:
        items:
          $ref: '#/definitions/model.CkTableNameType'
        type: array
      name:
        type: string
      order:
        items:
          type: string
        type: array
      partition:
        $ref: '#/definitions/model.CkTablePartition'
    type: object
  model.DeployCkReq:
    properties:
      clickHouse:
        $ref: '#/definitions/model.CkDeployConfig'
      directory:
        type: string
      hosts:
        items:
          type: string
        type: array
      packages:
        items:
          type: string
        type: array
      password:
        type: string
      user:
        type: string
    type: object
  model.LoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  model.ZkNode:
    properties:
      host:
        type: string
      port:
        type: integer
    type: object
info:
  contact: {}
  title: Swagger Example API
  version: "1.0"
paths:
  /api/v1/ck/table:
    delete:
      description: 删除表
      parameters:
      - description: table name
        in: query
        name: tableName
        required: true
        type: string
      responses:
        "200":
          description: '{"code":5002,"msg":"删除ClickHouse表失败","data":""}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除表
    get:
      description: 描述表
      parameters:
      - description: table name
        in: query
        name: tableName
        required: true
        type: string
      responses:
        "200":
          description: '{"code":5040,"msg":"描述ClickHouse表失败","data":""}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 描述表
    post:
      description: 创建表
      parameters:
      - description: request body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/model.CreateCkTableReq'
      responses:
        "200":
          description: '{"code":5001,"msg":"创建ClickHouse表失败","data":""}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建表
    put:
      description: 修改表
      parameters:
      - description: request body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/model.AlterCkTableReq'
      responses:
        "200":
          description: '{"code":5003,"msg":"更改ClickHouse表失败","data":""}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 修改表
  /api/v1/deploy/ck:
    post:
      description: 部署clickhouse
      parameters:
      - description: request body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/model.DeployCkReq'
      responses:
        "200":
          description: '{"code":5016,"msg":"检查组件启动状态失败","data":""}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 部署clickhouse
  /api/v1/login:
    post:
      description: 登陆
      parameters:
      - description: request body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/model.LoginReq'
      responses:
        "200":
          description: '{"code":5032,"msg":"用户密码验证失败","data":""}'
          schema:
            type: string
      summary: 登陆
  /api/v1/package:
    delete:
      description: 删除包
      parameters:
      - description: package name
        in: query
        name: packageName
        required: true
        type: string
      responses:
        "200":
          description: '{"code":5002,"msg":"删除ClickHouse表失败","data":""}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除包
    get:
      description: 获取安装包列表
      responses:
        "200":
          description: '{"code":5005,"msg":"获取安装包列表失败","data":""}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取安装包列表
    post:
      consumes:
      - multipart/form-data
      description: 上传安装包
      parameters:
      - description: 安装包
        in: formData
        name: package
        required: true
        type: file
      responses:
        "200":
          description: '{"code":5004,"msg":"上传安装包失败","data":""}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 上传安装包
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: token
    type: apiKey
swagger: "2.0"
